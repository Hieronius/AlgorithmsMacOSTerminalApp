//
//  1332. Remove Palindromic Subsequences. LeetCode.swift
//  AlgorithmsWithBasicInput
//
//  Created by Арсентий Халимовский on 18.10.2023.
//

import Foundation

/*
 1332. Remove Palindromic Subsequences
 
 You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.

 Return the minimum number of steps to make the given string empty.

 A string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does not necessarily need to be contiguous.

 A string is called palindrome if is one that reads the same backward as well as forward.

  

 Example 1:

 Input: s = "ababa"
 Output: 1
 Explanation: s is already a palindrome, so its entirety can be removed in a single step.
 Example 2:

 Input: s = "abb"
 Output: 2
 Explanation: "abb" -> "bb" -> "".
 Remove palindromic subsequence "a" then "bb".
 Example 3:

 Input: s = "baabb"
 Output: 2
 Explanation: "baabb" -> "b" -> "".
 Remove palindromic subsequence "baab" then "b".
  

 Constraints:

 1 <= s.length <= 1000
 s[i] is either 'a' or 'b'.
 */

var sExample = "aaaaabbbbabbabbaaabbbaaaaa"

func removePalindromeSub(_ s: String) -> Int {
    s == String(s.reversed()) ? 1 : 2
}

func removePalindromeSub1(_ s: String) -> Int {
    var ar = Array(s)
    var start = 0
    var end = s.count - 1
    var sequence = [Int]()
    
    while ar != Array(ar.reversed()) {
        if ar[start] == ar[end] {
            sequence.append(start)
            sequence.append(end)
            start += 1
            end -= 1
        } else {
            end -= 1
        }
    }
    print(sequence)
    return 999
}
